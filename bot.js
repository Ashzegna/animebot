// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª bot.js —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –¥–ª—è –º–µ–Ω—é –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
const { Telegraf, Markup } = require('telegraf');
const { v4: uuidv4 } = require('uuid');
const { botTexts } = require('./config');
const { questions, customQuestionTemplates } = require('./questions');
const { determinePersonalityType, generateResult, analyzeCompatibility } = require('./results');
const { getUser, saveUser, getTest, saveTest } = require('./database');

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
const createBot = (token) => {
  const bot = new Telegraf(token);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
  bot.start(async (ctx) => {
    const userId = ctx.from.id;
    const startPayload = ctx.startPayload;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    let user = getUser(userId);
    if (!user) {
      user = {
        id: userId,
        name: ctx.from.first_name,
        username: ctx.from.username,
        state: 'start',
        answers: [],
        currentQuestion: 0,
        results: null,
        customQuestion: null,
        customQuestionOptions: [],
        testsSent: [],
        testsReceived: [],
        unreadResults: [] // –ù–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      };
      saveUser(userId, user);
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å payload –≤ /start, –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—à–µ–ª –ø–æ —Å—Å—ã–ª–∫–µ –æ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (startPayload) {
      const testId = startPayload;
      const test = getTest(testId);
      
      if (test && test.status === 'pending') {
        // –°–≤—è–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç —Å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º
        test.receiver = userId;
        saveTest(testId, test);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.testsReceived.push(testId);
        user.state = 'test_received';
        user.currentTest = testId;
        user.currentQuestion = 0;
        user.answers = [];
        saveUser(userId, user);
        
        // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç
        await ctx.reply(botTexts.receivedTestIntro);
        return startTest(ctx);
      } else {
        // –ï—Å–ª–∏ —Ç–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω
        await ctx.reply('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ—Ç —Ç–µ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω. –•–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ—Å—Ç?');
        await ctx.reply(botTexts.welcome);
        return showMainMenu(ctx);
      }
    }
    
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    await ctx.reply(botTexts.welcome);
    return showMainMenu(ctx);
  });

  // –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  async function showMainMenu(ctx) {
    const userId = ctx.from.id;
    const user = getUser(userId);
    
    if (user) {
      user.state = 'main_menu';
      saveUser(userId, user);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      const hasUnreadResults = user.unreadResults && user.unreadResults.length > 0;
      
      const buttons = [
        ['‚úèÔ∏è –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç', 'üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç –¥—Ä—É–≥—É']
      ];
      
      if (hasUnreadResults) {
        buttons.push([`üîî –ù–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (${user.unreadResults.length})`]);
      }
      
      buttons.push(['‚ÑπÔ∏è –û –±–æ—Ç–µ', 'üéµ –û –ø–µ—Å–Ω–µ "–ü–∞–∑–∑–ª—ã"']);
      
      return ctx.reply('–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?', Markup.keyboard(buttons).resize());
    }
  }

  // –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç
  async function startTest(ctx) {
    const userId = ctx.from.id;
    const user = getUser(userId);
    
    if (user) {
      user.state = 'testing';
      user.currentQuestion = 0;
      user.answers = [];
      saveUser(userId, user);
      
      await ctx.reply(botTexts.startTest, Markup.removeKeyboard());
      return askQuestion(ctx, 0);
    }
  }

  // –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
  async function askQuestion(ctx, questionIndex) {
    const userId = ctx.from.id;
    const user = getUser(userId);
    
    if (!user) return;
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∏ –¥–æ—à–µ–ª –¥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    if (user.state === 'test_received' && user.currentTest) {
      const test = getTest(user.currentTest);
      if (test && questionIndex === questions.length && test.customQuestion) {
        // –ó–∞–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å
        const customQuestion = test.customQuestion;
        const options = test.customQuestionOptions;
        
        const buttons = options.map((option, index) => 
          Markup.button.callback(`${index + 1}Ô∏è‚É£ ${option}`, `custom_answer_${index}`)
        );
        
        await ctx.reply(`${customQuestion} ${questionIndex + 1}/${questions.length + 1}`, 
          Markup.inlineKeyboard(buttons, { columns: 1 })
        );
        
        user.currentQuestion = questionIndex;
        saveUser(userId, user);
        return;
      }
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã
    if (questionIndex >= questions.length) {
      return finishTest(ctx);
    }
    
    // –ó–∞–¥–∞–µ–º –æ–±—ã—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞
    const question = questions[questionIndex];
    const buttons = question.options.map((option, index) => 
      Markup.button.callback(option.text, `answer_${questionIndex}_${index}`)
    );
    
    await ctx.reply(`${question.emoji} ${question.text} ${questionIndex + 1}/${questions.length}`, 
      Markup.inlineKeyboard(buttons, { columns: 1 })
    );
    
    user.currentQuestion = questionIndex;
    saveUser(userId, user);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ–±—ã—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
  bot.action(/answer_(\d+)_(\d+)/, async (ctx) => {
    const userId = ctx.from.id;
    const user = getUser(userId);
    
    if (!user) return;
    
    const questionIndex = parseInt(ctx.match[1]);
    const answerIndex = parseInt(ctx.match[2]);
    
    const question = questions[questionIndex];
    const answer = question.options[answerIndex];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    user.answers[questionIndex] = answer;
    saveUser(userId, user);
    
    await ctx.answerCbQuery(`–í—ã–±—Ä–∞–Ω–æ: ${answer.text}`);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    return askQuestion(ctx, questionIndex + 1);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å
  bot.action(/custom_answer_(\d+)/, async (ctx) => {
    const userId = ctx.from.id;
    const user = getUser(userId);
    
    if (!user || !user.currentTest) return;
    
    const answerIndex = parseInt(ctx.match[1]);
    const test = getTest(user.currentTest);
    
    if (!test) return;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å
    const customAnswer = test.customQuestionOptions[answerIndex];
    user.customAnswer = customAnswer;
    saveUser(userId, user);
    
    await ctx.answerCbQuery(`–í—ã–±—Ä–∞–Ω–æ: ${customAnswer}`);
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
    return finishTest(ctx);
  });

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
  async function finishTest(ctx) {
    const userId = ctx.from.id;
    const user = getUser(userId);
    
    if (!user) return;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤
    const personalityType = determinePersonalityType(user.answers);
    const result = generateResult(personalityType);
    
    user.results = result;
    user.state = 'test_completed';
    saveUser(userId, user);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const resultMessage = `
${botTexts.resultIntro}

${result.emoji} *${result.name}* ${result.emoji}

${result.description}

*–ò–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:* ${result.examples}

*–¢–≤–æ—è —Å—Ç—Ä–æ—á–∫–∞ –∏–∑ –ø–µ—Å–Ω–∏:*
${result.songLine}

üéß [–ü–æ—Å–ª—É—à–∞—Ç—å –ø–µ—Å–Ω—é](${result.songUrl})
`;
    
    await ctx.reply(resultMessage, { parse_mode: 'Markdown' });
    
    // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª —Ç–µ—Å—Ç, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    if (user.state === 'test_received' && user.currentTest) {
      const test = getTest(user.currentTest);
      
      if (test) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
        test.status = 'completed';
        test.receiverAnswers = [...user.answers];
        test.receiverResult = result;
        test.receiverCustomAnswer = user.customAnswer;
        test.completedAt = new Date().toISOString();
        saveTest(test.id, test);
        
        // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        await ctx.reply(botTexts.surpriseMessage, 
          Markup.inlineKeyboard([
            Markup.button.callback('üëÄ –î–∞, —Ö–æ—á—É —É–≤–∏–¥–µ—Ç—å!', 'view_sender_results')
          ])
        );
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        try {
          const sender = getUser(test.sender);
          if (sender) {
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç –≤ —Å–ø–∏—Å–æ–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if (!sender.unreadResults) sender.unreadResults = [];
            sender.unreadResults.push(test.id);
            saveUser(sender.id, sender);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            bot.telegram.sendMessage(
              sender.id,
              `üéâ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–ò–®–õ–ò! üéâ\n\n–¢–≤–æ–π –¥—Ä—É–≥ ${ctx.from.first_name} –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å, –∫–∞–∫–∞—è —É –Ω–µ–≥–æ —Å–≤–µ—Ä—Ö—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∏ —É–≤–∏–¥–µ—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã, –≤–∫–ª—é—á–∞—è —Ç–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π!`,
              Markup.inlineKeyboard([
                Markup.button.callback('üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã', `view_receiver_results_${test.id}`)
              ])
            );
          }
        } catch (error) {
          console.error('Error sending notification to sender:', error);
        }
      }
    } else {
      // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –æ–±—ã—á–Ω—ã–π —Ç–µ—Å—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç –¥—Ä—É–≥—É
      await ctx.reply(botTexts.shareInvitation, 
        Markup.inlineKeyboard([
          Markup.button.callback('üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç –¥—Ä—É–≥—É', 'share_test')
        ])
      );
    }
    
    setTimeout(() => {
      showMainMenu(ctx);
    }, 2000);
  }

  // –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
  bot.action('view_sender_results', async (ctx) => {
    const userId = ctx.from.id;
    const user = getUser(userId);
    
    if (!user || !user.currentTest) return;
    
    const test = getTest(user.currentTest);
    if (!test) return;
    
    const sender = getUser(test.sender);
    if (!sender || !sender.results) return;
    
    const senderResult = sender.results;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    const resultMessage = `
–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–≤–æ–µ–≥–æ –¥—Ä—É–≥–∞:

${senderResult.emoji} *${senderResult.name}* ${senderResult.emoji}

${senderResult.description}

*–°—Ç—Ä–æ—á–∫–∞ –∏–∑ –ø–µ—Å–Ω–∏ –¥—Ä—É–≥–∞:*
${senderResult.songLine}

üéß [–ü–æ—Å–ª—É—à–∞—Ç—å –ø–µ—Å–Ω—é](${senderResult.songUrl})
`;
    
    await ctx.reply(resultMessage, { parse_mode: 'Markdown' });
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    const compatibility = analyzeCompatibility(user.results.type, senderResult.type);
    
    const compatibilityMessage = `
${botTexts.compatibilityIntro}

${compatibility.emojis}

*–£—Ä–æ–≤–µ–Ω—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:* ${'‚≠ê'.repeat(compatibility.compatibilityLevel)}

${compatibility.compatibilityText}

*–í–∞—à–∞ –æ–±—â–∞—è —Å—Ç—Ä–æ—á–∫–∞ –∏–∑ –ø–µ—Å–Ω–∏:*
${compatibility.songLine}

üéß [–ü–æ—Å–ª—É—à–∞—Ç—å –ø–µ—Å–Ω—é](${compatibility.songUrl})
`;
    
    await ctx.reply(compatibilityMessage, { parse_mode: 'Markdown' });
    
    await ctx.answerCbQuery();
  });

  // –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª—É—á–∞—Ç–µ–ª—è (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  bot.action(/view_receiver_results_(.+)/, async (ctx) => {
    const userId = ctx.from.id;
    const testId = ctx.match[1];
    
    const test = getTest(testId);
    if (!test || test.status !== 'completed') {
      await ctx.reply('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.');
      await ctx.answerCbQuery();
      return;
    }
    
    const receiver = getUser(test.receiver);
    if (!receiver) {
      await ctx.reply('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.');
      await ctx.answerCbQuery();
      return;
    }
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const user = getUser(userId);
    if (user && user.unreadResults) {
      user.unreadResults = user.unreadResults.filter(id => id !== testId);
      saveUser(userId, user);
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    const receiverResult = test.receiverResult;
    
    const resultMessage = `
üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–≤–æ–µ–≥–æ –¥—Ä—É–≥–∞ ${receiver.name}:*

${receiverResult.emoji} *${receiverResult.name}* ${receiverResult.emoji}

${receiverResult.description}

*–°—Ç—Ä–æ—á–∫–∞ –∏–∑ –ø–µ—Å–Ω–∏ –¥—Ä—É–≥–∞:*
${receiverResult.songLine}
`;
    
    await ctx.reply(resultMessage, { parse_mode: 'Markdown' });
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–Ω–æ–≤—ã–π –±–ª–æ–∫)
    let responsesMessage = "*–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:*\n\n";
    for (let i = 0; i < Math.min(test.receiverAnswers.length, questions.length); i++) {
      const question = questions[i];
      const answer = test.receiverAnswers[i];
      if (question && answer) {
        responsesMessage += `*–í–æ–ø—Ä–æ—Å ${i+1}:* ${question.text}\n`;
        responsesMessage += `*–û—Ç–≤–µ—Ç:* ${answer.text}\n\n`;
      }
    }
    
    await ctx.reply(responsesMessage, { parse_mode: 'Markdown' });
    
    // –ï—Å–ª–∏ –±—ã–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–≥–æ
    if (test.customQuestion && test.receiverCustomAnswer) {
      await ctx.reply(`
üí° *–¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –±—ã–ª:* 
"${test.customQuestion}"

‚ú® *–û—Ç–≤–µ—Ç –¥—Ä—É–≥–∞:* 
"${test.receiverCustomAnswer}"
`, { parse_mode: 'Markdown' });
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    const sender = getUser(test.sender);
    if (sender && sender.results) {
      const compatibility = analyzeCompatibility(sender.results.type, receiverResult.type);
      
      const compatibilityMessage = `
${botTexts.compatibilityIntro}

${compatibility.emojis}

*–£—Ä–æ–≤–µ–Ω—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:* ${'‚≠ê'.repeat(compatibility.compatibilityLevel)}

${compatibility.compatibilityText}

*–í–∞—à–∞ –æ–±—â–∞—è —Å—Ç—Ä–æ—á–∫–∞ –∏–∑ –ø–µ—Å–Ω–∏:*
${compatibility.songLine}

üéß [–ü–æ—Å–ª—É—à–∞—Ç—å –ø–µ—Å–Ω—é](${compatibility.songUrl})
`;
      
      await ctx.reply(compatibilityMessage, { parse_mode: 'Markdown' });
    }
    
    await ctx.answerCbQuery();
  });

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–∞ –¥—Ä—É–≥—É - –û–ë–ù–û–í–õ–ï–ù–û
  bot.action('share_test', async (ctx) => {
    const userId = ctx.from.id;
    const user = getUser(userId);
    
    if (!user || !user.results) {
      await ctx.reply('–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏ —Ç–µ—Å—Ç, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –¥—Ä—É–≥—É!');
      await ctx.answerCbQuery();
      return;
